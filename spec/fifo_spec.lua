local new_fifo = require "fifo"

describe("Everything works.", function()
	it("peek works", function()
		local f = new_fifo()
		f:push("foo")
		assert.same("foo", (f:peek()))
		f:push("bar")
		assert.same("foo", (f:peek()))
		assert.same("bar", (f:peek(2)))
		f:pop()
		assert.same("bar", (f:peek()))
	end)
	it("length works", function()
		local f = new_fifo("foo", "bar")
		assert.same(2, f:length())
		f:push("baz")
		assert.same(3, f:length())
		f:pop()
		f:pop()
		f:pop()
		assert.same(0, f:length())
	end)
	if _VERSION > "Lua 5.1" then
		it("length operator works", load([[
			local new_fifo = require "fifo"
			local f = new_fifo("foo", "bar")
			assert.same(2, #f)
			f:push("baz")
			assert.same(3, #f)
			f:pop()
			f:pop()
			f:pop()
			assert.same(0, #f)
		]], nil, "t", _ENV))
	end
	it("insert works", function()
		local f = new_fifo("foo")
		f:insert(1, "baz")
		f:insert(f:length()+1, "bar")
		assert.same("baz", f:pop())
		assert.same("foo", f:pop())
		assert.same("bar", f:pop())
		assert.errors(function() f:pop() end)

		f:insert(1, "qux")
		assert.same("qux", f:pop())

		assert.errors(function() f:insert(2, "too far") end)

		assert.errors(function() f:insert(0) end)
	end)
end)
